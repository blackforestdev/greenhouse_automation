from flask import Flask, render_template, request, jsonify, redirect, url_for
from flask_socketio import SocketIO
from datetime import datetime
from config import DEBUG, SECRET_KEY

# Use relative imports for the modules within subdirectories
from modules.db import Database
from modules import motors as motor_control
from modules import sensors as sensors

app = Flask(__name__)
app.secret_key = SECRET_KEY
app.debug = DEBUG

socketio = SocketIO(app)  # Initialize SocketIO with the Flask app

def convert_to_12_hour_format(time_string):
    """
    Convert 24-hour time format to 12-hour with AM/PM.
    """
    try:
        # Convert string to datetime object
        time_obj = datetime.strptime(time_string, '%H:%M:%S')
        
        # Convert to desired format
        return time_obj.strftime('%I:%M %p')
    except Exception as e:
        print(f"Error converting time format: {e}")
        return time_string

@app.route('/')
def index():
    """
    Render the main dashboard/interface.
    """
    # Get any data you want to display, like recent sensor readings or current motor states.
    return render_template('index.html')

@socketio.on('change_motor_status')
def handle_motor_status(data):
    # Update the motor status in your backend logic
    # ... (Add your motor update logic here if needed)
    
    # Emit the updated status to all connected clients
    socketio.emit('update_motor_status', data, broadcast=True)
@app.route('/motor_status/<motor_id>', methods=['POST'])
def motor_status(motor_id):
    print(request.json)  # print received data
    """
    Update motor status based on the received status from the web interface.
    """
    try:
        status = request.json.get('status')
        
        if motor_id == 'sidewall-left-switch' and status == 'Active':
            # TODO: Add motor control logic for activating the sidewall-left motor
            pass
        elif motor_id == 'sidewall-left-switch' and status == 'Deactivated':
            # TODO: Add motor control logic for deactivating the sidewall-left motor
            pass
        if motor_id == 'sidewall-right-switch' and status == 'Active':
            # TODO: Add motor control logic for activating the sidewall-right motor
            pass
        elif motor_id == 'sidewall-right-switch' and status == 'Deactivated':
            # TODO: Add motor control logic for deactivating the sidewall-right motor
            pass
        if motor_id == 'overhead-left-switch' and status == 'Active':
            # TODO: Add motor control logic for activating the overhead-left motor
            pass
        elif motor_id == 'overhead-left-switch' and status == 'Deactivated':
            # TODO: Add motor control logic for deactivating the overhead-left motor
            pass
        if motor_id == 'overhead-right-switch' and status == 'Active':
            # TODO: Add motor control logic for activating the overhead-right motor
            pass
        elif motor_id == 'overhead-right-switch' and status == 'Deactivated':
            # TODO: Add motor control logic for deactivating the overhead-right motor
            pass
        else:
            return jsonify({'error': 'Invalid motor ID or status'}), 400
        
        return jsonify({'status': 'success'}), 200

    except Exception as e:
        print(f"Error updating motor status: {e}")
        return jsonify({'error': 'Failed to update motor status'}), 500


@app.route('/set_time', methods=['POST'])
def set_time():
    """
    Set the desired time for motor actions.
    """
    roll_up_time = request.form.get('roll_up_time')
    roll_down_time = request.form.get('roll_down_time')
    
    # Save these times to your database or wherever you're storing settings.
    with Database() as db_instance:
        db_instance.save_time_settings(roll_up_time, roll_down_time)

    return redirect(url_for('index'))

@app.route('/get_current_times', methods=['GET'])
def get_current_times():
    try:
        with Database() as db_instance:
            roll_up_time = db_instance.get_roll_up_time()
            roll_down_time = db_instance.get_roll_down_time()
    except Exception as e:
        print(f"Error fetching times from database: {e}")
        roll_up_time = None
        roll_down_time = None

    return jsonify({
        'roll_up': convert_to_12_hour_format(str(roll_up_time)) if roll_up_time else "N/A",
        'roll_down': convert_to_12_hour_format(str(roll_down_time)) if roll_down_time else "N/A"
    })

@app.route('/motor_action/<action>', methods=['POST'])
def motor_action(action):
    """
    Trigger motor actions manually or programmatically.
    """
    if action == 'roll_up':
        motor_control.roll_up()
    elif action == 'roll_down':
        motor_control.roll_down()
    else:
        return jsonify({'error': 'Invalid action'}), 400
    
    return jsonify({'status': 'success'}), 200

@app.route('/motor_action/stop', methods=['POST'])
def motor_stop():
    """
    Stop motor action.
    """
    motor_control.stop()
    return jsonify({'status': 'success'}), 200

@app.route('/get_sensor_data', methods=['GET'])
def get_sensor_data():
    """
    Fetch the latest sensor data.
    """
    data = sensors.get_latest_data()
    return jsonify(data)

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000)
