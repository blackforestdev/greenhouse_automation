import { getCurrentTime } from './timeManager.js';

// Update the content of the #current-time element with the current time
export function updateCurrentTimeElement() {
    const currentTimeElement = document.querySelector('#current-time');
    currentTimeElement.textContent = getCurrentTime();
}

// Initialize time updating: set the current time immediately and then update every 1 second
export function initTimeUpdater() {
    updateCurrentTimeElement();  // Initial update
    setInterval(updateCurrentTimeElement, 1000);  // Update every 1 second
}

export function triggerMotor(action) {
    fetch(`/motor_action/${action}`, {
        method: 'POST'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        alert(`${action.replace('_', ' ')} successfully triggered!`);
    })
    .catch(error => {
        console.error('There was a problem with the fetch operation:', error.message);
        alert('An error occurred.');
    });
}

export function fetchAndDisplayTimes() {
    fetch('/get_current_times')
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        document.getElementById('roll-up-time').textContent = data.roll_up || "Not set";
        document.getElementById('roll-down-time').textContent = data.roll_down || "Not set";
    })
    .catch(error => {
        console.error('Error fetching times:', error);
        alert('Failed to fetch current times.');
    });
}

export function stopMotorEventListener() {
    document.getElementById('stop-motor-btn').addEventListener('click', function() {
        fetch('/motor_action/stop', {
            method: 'POST'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.status === 'success') {
                alert('Motors stopped successfully!');
            } else {
                alert('Failed to stop motors.');
            }
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error.message);
            alert('An error occurred.');
        });
    });
}

// Switches to Activate or Deactivate each motor
export function initMotorSwitches() {
    const motorSwitches = [
        { id: 'sidewall-left-switch', statusElem: 'sidewall-left-status' },
        { id: 'sidewall-right-switch', statusElem: 'sidewall-right-status' },
        { id: 'overhead-left-switch', statusElem: 'overhead-left-status' },
        { id: 'overhead-right-switch', statusElem: 'overhead-right-status' },
    ];

    motorSwitches.forEach(motor => {
        const switchElem = document.getElementById(motor.id);
        switchElem.addEventListener('change', function() {
            const status = switchElem.checked ? 'Active' : 'Deactivated';
            document.getElementById(motor.statusElem).textContent = status;

            // Now, send the status to the server
            fetch(`/motor_status/${motor.id}`, {
                method: 'POST',
                body: JSON.stringify({ status: status }),
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error.message);
            });
        });
    });
}

export function fetchMotorStatuses() {
    fetch('/get_motor_statuses')
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        for (let motorId in data) {
            const switchElem = document.getElementById(motorId);
            const statusElemId = motorId + '-status';
            switchElem.checked = data[motorId];
            document.getElementById(statusElemId).textContent = data[motorId] ? 'Active' : 'Deactivated';
        }
    })
    .catch(error => {
        console.error('Error fetching motor statuses:', error);
        alert('Failed to fetch motor statuses.');
    });
}
