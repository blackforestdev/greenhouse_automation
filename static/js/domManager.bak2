import { getCurrentTime } from './timeManager.js';

// Initialize the socket connection
const socket = io();

// Update the content of the #current-time element with the current time
export function updateCurrentTimeElement() {
    const currentTimeElement = document.querySelector('#current-time');
    currentTimeElement.textContent = getCurrentTime();
}

// Initialize time updating: set the current time immediately and then update every 1 second
export function initTimeUpdater() {
    updateCurrentTimeElement();  // Initial update
    setInterval(updateCurrentTimeElement, 1000);  // Update every 1 second
}

export function triggerMotor(action) {
    // Emit the action to the server using Socket.IO
    socket.emit('trigger_motor', { action: action });
}

socket.on('motor_action_result', (data) => {
    if (data.action && data.result) {
        alert(`${data.action.replace('_', ' ')} ${data.result}`);
    } else {
        alert('An error occurred with the motor action.');
    }
});

export function fetchAndDisplayTimes() {
    // Request times from the server using Socket.IO
    socket.emit('request_current_times');

    // Listen for the response
    socket.on('current_times', (data) => {
        document.getElementById('roll-up-time').textContent = data.roll_up || "Not set";
        document.getElementById('roll-down-time').textContent = data.roll_down || "Not set";
    });
}

export function stopMotorEventListener() {
    document.getElementById('stop-motor-btn').addEventListener('click', function() {
        socket.emit('stop_motor');
    });

    // Listen for the stop motor result
    socket.on('stop_motor_result', (data) => {
        if (data.status === 'success') {
            alert('Motors stopped successfully!');
        } else {
            alert('Failed to stop motors.');
        }
    });
}

export function initMotorSwitches() {
    // ... existing initMotorSwitches code ...
}

export function fetchMotorStatuses() {
    // ... existing fetchMotorStatuses code ...
}

// Function to handle the set time form submission
export function handleSetTimeForm() {
    const setTimeForm = document.getElementById('set-time-form');

    setTimeForm.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the default form submission

        const rollUpTime = document.getElementById('roll_up_time').value;
        const rollDownTime = document.getElementById('roll_down_time').value;

        fetch('/set_time', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `roll_up_time=${encodeURIComponent(rollUpTime)}&roll_down_time=${encodeURIComponent(rollDownTime)}`
        })
        .then(response => response.json())
        .then(data => {
            if(data.status === 'success') {
                // Update the UI to show the times were successfully set
                alert('Times set successfully!');
                fetchAndDisplayTimes(); // Optionally refresh the displayed times
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while setting times');
        });
    });
}

// Make sure to call this function when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', function() {
    // ... your existing code that initializes elements ...
    handleSetTimeForm(); // Initialize form handling
});
